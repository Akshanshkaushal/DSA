 //bfs level order 
class Solution {

public:
   void levelsabkeniklenge(TreeNode* root, vector<vector<int>>& ans){
       
        queue<TreeNode*> q;

        if(root == NULL) return;

        q.push(root);

        while(!q.empty()){
    
            int size = q.size();
       
            vector<int> level;
            
            for(int i=0; i<size; i++){
                TreeNode* node = q.front();
                q.pop();
                if(node->left != NULL) q.push(node->left);
                if(node->right != NULL) q.push(node->right);

                level.push_back(node->val);
            }
            ans.push_back(level);
        }
    
   }

public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        
        vector<vector<int>> ans;
        levelsabkeniklenge(root, ans);
        return ans;
      
    }
};



//zig zag
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if (root == nullptr) return ans;

        queue<TreeNode*> q;
        q.push(root); 

        bool leftToRight = true;

        while (!q.empty()) {
            int size = q.size();
            vector<int> level(size);

            for (int i = 0; i < size; i++) {
                TreeNode* node = q.front();
                q.pop();

                int index = (leftToRight) ? i : (size - i - 1);

                level[index] = node->val;

                if (node->left != nullptr) q.push(node->left);
                if (node->right != nullptr) q.push(node->right);
            }

            leftToRight = !leftToRight;
            ans.push_back(level);
        }

        return ans;
    }
};


// vertical order

 
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        
        // vertical, level , mulitset(include duplicate values too)
        map<int, map<int, multiset<int>>> nodes;

        // for bfs and storing the verticals and levels to map
        queue<pair<TreeNode* , pair<int, int>>> todo;

        todo.push({root, {0,0}});

        while(!todo.empty()){
            auto p = todo.front();
            todo.pop();
            TreeNode* node = p.first;

            int x = p.second.first;  // vertical
            int y = p.second.second; //level
          
            nodes[x][y].insert(node->val);

            if(node->left){
                todo.push({node->left, {x-1, y+1}});
                //vertical-1, level+1

            }

             if(node->right){
                todo.push({node->right, {x+1, y+1}});
                //vertical+1, level+1
            }
        }

        vector<vector<int>> ans;
        
        // for a particular vertical
        // push elements corresponding to particular levels 
        for(auto p : nodes){
            vector<int> col;
            for(auto q : p.second){
                //q--> map<int(level), multiset>
                for (int val : q.second) {
                    col.push_back(val);
                }            }
            ans.push_back(col);
        }
        return ans;
    }
};

// boundary

\/************************************************************

    Following is the Binary Tree node structure:

    template <typename T>
    class TreeNode
    {
    public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data)
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode()
        {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/

bool isLeaf(TreeNode<int> *root){
    return !root->left && !root->right;
}

void addLeftBoundary(TreeNode<int> *root, vector<int>& res){
    TreeNode<int>* cur = root->left;

    while(cur){

        if (!isLeaf(cur)) {
            res.push_back(cur->data);
        }

        if(cur->left){
            cur = cur->left;
        }else{
            cur = cur->right;
        }
    }
}

void addLeaves(TreeNode<int> *root, vector<int>& res){
  //inorder
    TreeNode<int>* cur = root;
     
    if(isLeaf(cur)){
        res.push_back(cur->data);
        return;
    }

    if(root->left){
        addLeaves(root->left, res);
    }

    if(root->right){
        addLeaves(root->right, res);
    }

}



void addRightBoundary(TreeNode<int> *root, vector<int>& res){
    TreeNode<int>* cur = root->right;

    vector<int> temp;

    while(cur){

        if (!isLeaf(cur)) {
            temp.push_back(cur->data);
        }

        if(cur->right){
            cur = cur->right;
        }else{
            cur = cur->left;
        }
    }

    for(int i=temp.size()-1; i>=0; i--){
        res.push_back(temp[i]);
    }
}

vector<int> traverseBoundary(TreeNode<int> *root)
{
	  vector<int> res;

      if(!root){
          return res;
      }

      if(isLeaf(root)){
          res.push_back(root->data);
          return res;
      }

      if(!isLeaf(root)){
          res.push_back(root->data);
      }

      addLeftBoundary(root, res);
      addLeaves(root, res);
      addRightBoundary(root, res);

      return res;
}
