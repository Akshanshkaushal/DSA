//nums of unique elements
return all possible 
subsets (the power set).
The solution set must not contain duplicate subsets.

-- simple take not take 
--> this will return unique combinations until given array elemntx are distinct

class Solution {

void solve(vector<int> nums, vector<int> output,int index, vector<vector<int>>& ans){
    //base case
    // have to handle base condition by our own 
    if(index>=nums.size()){
        ans.push_back(output);
        return;
    }

    //include
    int element = nums[index];
    output.push_back(element);
    solve(nums,output,index+1,ans);

    output.pop_back();
        //exlude
    solve(nums,output,index+1,ans);

}

public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> output;
        int index = 0;
        solve(nums,output,index,ans);
        return ans;
    }
};

--- take not take with conditions

{
     // whenever duplicates in the array , and have to find out he 
    // distinct ones , apply this if(i != idx and arr[i] == arr[i-1]) continue; 
}


//nums that may contain duplicates,
// The solution set must not contain duplicate 
// subsets. Return the solution in any order.
 
// Input: nums = [1,2,2]
// Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]


class Solution {
private:
    void f(int idx, vector<int>& arr, vector<int>& ds, vector<vector<int>> &ans){
        ans.push_back(ds);   //add at each step    // to print empty set
         
        // loop is handling thebase conditon
        for(int i=idx; i<arr.size(); i++){
         
         // whenever duplicates in the array , and have to find out he 
         // distinct ones , apply this if(i != idx and arr[i] == arr[i-1]) continue; 

            if(i != idx and arr[i] == arr[i-1])   // if duplicate element if found then ignore it 
                continue;

            ds.push_back(arr[i]);   // else push the element into the ds 
            f(i+1, arr, ds, ans);   // recursive call the function
            ds.pop_back();          // remove the first element form the top of the array
        }

    }
public:
    vector<vector<int>> subsetsWithDup(vector<int>& arr) {
        vector<vector<int>> ans;    // to store all the required pair 
        vector<int> ds;             // creating the pair
        
        sort(arr.begin(), arr.end());   // sorting the array as we can ignore the element the duplicate the pair
        f(0, arr, ds, ans);         
        
        return ans;
    }
};




//Palindrome Partitioning

class Solution {

private:
bool isPalindrome(int start,int end,string s){
    while(start<=end){
        if(s[start++] != s[end--]){
            return false;
        }
    }
    return true;
}

private:
void func(int index, string s, vector<string> path, vector<vector<string>>& ans){
    if(index == s.size()){
        ans.push_back(path);
        return;
    }
    
    for(int i=index; i<s.size(); i++){
      if(isPalindrome(index,i,s)){
        path.push_back(s.substr(index,i-index+1));
        func(i+1,s,path,ans);
        // skip the indexes that doesnt satidy palindrom econdition
        path.pop_back();
        //backtrack
      }
    }
}
public:
    vector<vector<string>> partition(string s) {
vector<vector<string>> ans;
vector<string> path;
func(0,s,path,ans);
return ans;
    }
};

