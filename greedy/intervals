//Insert Interval
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        
        int n = intervals.size();
        int i = 0;
        vector<vector<int>>result;

        while(i<n && intervals[i][1] < newInterval[0]){
            result.push_back(intervals[i]);
            i += 1;
        }

        while(i<n && intervals[i][0] <= newInterval[1]){
            newInterval[0] = min(newInterval[0],intervals[i][0]);
            newInterval[1] = max(newInterval[1],intervals[i][1]);
            i++;
        }
            result.push_back(newInterval);

        while(i<n){
            result.push_back(intervals[i]);
            i++;
        }
        return result;
    }
};

//Merge Intervals
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        
       int n = intervals.size();
       sort(intervals.begin(), intervals.end());

       vector<vector<int>> ans;

       for(int i=0;i<n;i++){

         if( ans.empty() || intervals[i][0] > ans.back()[1]){
            ans.push_back(intervals[i]);
         }

         else{
            ans.back()[1] = max(ans.back()[1], intervals[i][1]);
         }

       } 
    return ans;
    }
};

// Non-overlapping Intervals
Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1

bool comp(vector<int>& a, vector<int>& b) { return a[1] < b[1]; }
class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        // sort
        sort(intervals.begin(), intervals.end(), comp);
        int currEnd = intervals[0][1];
        int del = 0;
       for(int i=1;i<intervals.size();i++){
            if (currEnd > intervals[i][0]) {
                del++;
            } else {
                currEnd = intervals[i][1];
            }
       }
       return del;
    }
};
