//Rat in a Maze Problem - 
0: A blocked cell through which the rat cannot travel.
1: A free cell that the rat can pass through.

class Solution{
    
    private:
    void solve(int i, int j, vector<vector<int>> &a,int n, vector<string>& ans, string move,vector<vector<int>>& vis,int di[], int dj[]){
        
        if(i==n-1 && j==n-1){
            ans.push_back(move);
            return;
        }
         
         string dir ="DLRU";
         for(int ind=0;ind<4;ind++){
             int nexti = i+di[ind];
             int nextj = j+dj[ind];
             
             if(nexti >= 0 && nextj >=0 && nexti<n && nextj<n && !vis[nexti][nextj]  && a[nexti][nextj] == 1 ){
                 vis[i][j] = 1;
                 solve(nexti,nextj,a,n,ans,move+dir[ind],vis,di,dj);
                 vis[i][j] = 0;
             }
         }
 
    }
    
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
          vector<string> ans;
          vector<vector<int>> vis(n,vector<int> (n,0));
          int di[] = {+1,0,0,-1};
          int dj[] = {0,-1,1,0};
          if(m[0][0] == 1) solve(0,0,m,n,ans,"",vis,di,dj);
          return ans;
     }
};

//N-Queens

class Solution {

private:
bool isPossible(int row, int col,vector<string> board, int n){

    int dupRow = row;
    int dupCol = col;

    //uper left
    while(row>=0 && col>=0){
        if(board[row][col] == 'Q') return false;
        row--;
        col--;
    }

    row = dupRow;
    col = dupCol;
    //left
    while(col>=0){
         if(board[row][col] == 'Q') return false;
         col--;
    }
 
    row = dupRow;
    col = dupCol;
 
    //lower left
    while(row<n  && col>=0){
        if(board[row][col] == 'Q') return false;
        row++;
        col--;
    }
    return true;
}

private:
void solve(int col,vector<string> board, vector<vector<string>>& ans, int n ){
    if(col == n){
        ans.push_back(board);
        return;
    }

    for(int row=0;row<n;row++){
        if(isPossible(row,col,board,n)){
            board[row][col] = 'Q';
            solve(col+1,board,ans,n);
            board[row][col] = '.';
        }
    }
}    
public:
    vector<vector<string>> solveNQueens(int n) {
            vector<vector<string>> ans;
            vector<string> board(n);
            string s(n,'.');
            for(int i=0;i<n;i++){
                board[i] = s;
            }

            solve(0,board,ans,n);
            return ans;
    }
};

//Word Search

class Solution {
public:
    
    bool isWordPresent(int currentRow, int currentCol, int currentIndex, vector<vector<char>>&board, string &word)
    {
        // got the word
        if(currentIndex == word.size()) return true;
        
        
        // invalid cell
        if(currentRow < 0 || currentCol < 0 || currentRow >= board.size() || currentCol >= board[0].size() ||
          board[currentRow][currentCol] != word[currentIndex])
            return false;
        
        // mark it as visited
        board[currentRow][currentCol] = '.';
        
        // explore all the possiblies: L,R,U,D
        // 4 ^ (m*n)
        // 4 4 4 4 4= 4^5
        bool ans = isWordPresent(currentRow,currentCol-1,currentIndex+1,board,word) 
        || isWordPresent(currentRow,currentCol+1,currentIndex+1,board,word)
        || isWordPresent(currentRow-1,currentCol,currentIndex+1,board,word)
        || isWordPresent(currentRow+1,currentCol,currentIndex+1,board,word);
        
        // undo the changes
        board[currentRow][currentCol] = word[currentIndex];
        return ans;
    }
    
    bool exist(vector<vector<char>>& board, string word) 
    {
        int totalRows = board.size();
        int totalCols = board[0].size();
         

        // O(m)
        for(int currentRow = 0; currentRow < totalRows; currentRow++)
        {
            // O(n)
            for(int currentCol = 0; currentCol < totalCols; currentCol++)
            {
                if(board[currentRow][currentCol] == word[0])
                {
                    if(isWordPresent(currentRow,currentCol,0,board,word))
                        return true;
                }
            }
        }
        return false;
    }
};
/*
m->number of rows
n->number of columns
k-> total cells in board // (m*n)
Time Complexity = O((m*n)*4^(m*n)) // exponential
Space Complexity = O(1)
*/


// M-Coloring Problem
You are given an undirected graph consisting of v vertices and a list of edges,
along with an integer m.
Your task is to determine whether it is possible to color the
graph using at most m different colors such that no two adjacent vertices share the same color. Return true if the graph can be colored with at most m colors, otherwise return false.

 class Solution {
  public:
     bool isSafe(int v, vector<vector<int>>& graph, int color[], int c, int V) {
 
         for (int i = 0; i < V; i++) {
            if (graph[v][i] && c == color[i]) {
                return false; // Not safe if adjacent vertex has the same color
            }
        }
        return true; // Safe to color
    }

    // Utility function for graph coloring
    bool solve(vector<vector<int>>& graph, int m, int color[], int v,
                           int V) {
        // If all vertices have been assigned color, return true
        if (v == V) {
            return true;
        }

        // Try different colors for vertex v
        for (int c = 1; c <= m; c++) {
            // Check if this color can be assigned to vertex v
            if (isSafe(v, graph, color, c, V)) {
                color[v] = c; // Assign color to vertex v

                // Recur to assign colors to the next vertex
                if (solve(graph, m, color, v + 1, V)) {
                    return true; // Successful coloring
                }

                // Backtrack if not successful
                color[v] = 0; // Reset color for backtracking
            }
        }
        return false;  
    }

     bool graphColoring(int V, vector<pair<int, int>>& edges, int m) {
        
         vector<vector<int>> graph(V, vector<int>(V, 0));
         
        for (auto edge : edges) {
           graph[edge.first][edge.second] = 1; // Undirected graph
            graph[edge.second][edge.first] = 1;// Undirected graph
        }
        
        int color[m] = {0};
      
       return solve(graph, m, color, 0, V);
       
    }
};

// Sudoku Solver

class Solution {

private:
  bool isValid(vector<vector<char>>& board, int row, int col, char c){
    for(int i=0;i<9;i++){

        if(board[row][i] == c)
            return false;
        

         if(board[i][col] == c)
            return false;
        

        if(board[3*(row/3)+i/3][3*(col/3)+i%3] == c)
            return false;
             
    }
     return true;
  }

private:
   bool solve(vector<vector<char>>& board){
    for(int i=0;i<board.size();i++){
        for(int j=0;j<board[0].size();j++){

            if(board[i][j] == '.'){

                for(char c='1';c<='9';c++){

                    if(isValid(board,i,j,c)){
                       board[i][j] = c;

                       if(solve(board) == true){
                        return true;
                       }
                       else{
                        board[i][j] = '.';
                       }
                    }
                }
                   return false;
            }
         
        }
    }
    return true;
   }

public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};


// Word Break
Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]

class Solution {
public:
    bool wordBreakHelper(int start, string s, unordered_set<string>& wordSet) {
       
        if (start == s.length()) {
            return true;
        }

        // Try to partition the string at each possible point
        for (int end = start + 1; end <= s.length(); end++) {
        
            if (wordSet.count(s.substr(start, end - start)) && wordBreakHelper(s, wordSet, end)) {
             
                return true;
            }
        }

         return false;
    }

    bool wordBreak(string s, vector<string>& wordDict) {
 
         unordered_set<string> wordSet(wordDict.begin(), wordDict.end());
  
        return wordBreakHelper(0, s, wordSet);
    }
};

// 