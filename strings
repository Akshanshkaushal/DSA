paranthesis
class Solution {
public:
    bool checkValidString(string s) {

        // range method 
        // -1,0,1 range 
        // at any point if -1 not possible for max
        // for min if -1 just intialise it as 0
        
        int min = 0, max = 0;

        for(auto x :  s){
            if(x=='('){
                min = min+1;
                max = max+1;
            }
            else if(x==')'){
                min = min-1;
                max = max-1;
            }
            else{
                min = min-1;
                max = max+1;
            }

            if(min<0) min = 0;
            if(max<0) return false;
        }

        return min==0;

    }
};

star method
class Solution {
public:
    bool checkValidString(string s) {
        
        stack<int> open, star;

        int n = s.size();

         for(int i = 0;i<n;i++)
        {
            if(s[i]=='(') open.push(i);
            else if(s[i]=='*') star.push(i);
            else if(s[i]==')')
            {
                if(!open.empty()) open.pop();
                else if(!star.empty()) star.pop();
                else return false;
            }
        }

        // After processing all ')', try to match remaining '(' with '*' 
        while(!open.empty() && !star.empty() && open.top() <= star.top() ){
       
                open.pop();
                star.pop();
           
        }

        // If there are unmatched '(' remaining, the string is invalid
        return open.empty();
    }
};

locked strings - star method
class Solution {
public:
    bool canBeValid(string s, string locked) {

        int n = s.size();

        for(int i = 0;i<n;i++)
        {
            if(locked[i]=='0')
            s[i] = '*';
        }
 
        stack<int> open,star;
        for(int i = 0;i<n;i++)
        {
            if(s[i]=='(') open.push(i);
            else if(s[i]=='*') star.push(i);
            else if(s[i]==')')
            {
                if(!open.empty()) open.pop();
                else if(!star.empty()) star.pop();
                else return false;
            }
        }

        while(!open.empty() && !star.empty() && open.top() < star.top())
        {
            open.pop();
            star.pop();
        }
   
        if(star.size()%2)
        return false;
    
        return (open.empty());
        
    }
};
